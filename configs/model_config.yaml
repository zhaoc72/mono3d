# DINOv3 Adapter 配置文件 (修复版)
# 生成时间: 2025-10-27 14:12:27
# 修复说明: 使用随机初始化的 adapter,解决权重加载问题

model:
  name: "dinov3_adapter"
  
  # ============================================
  # DINOv3 Backbone 配置
  # ============================================
  backbone:
    type: "dinov3"
    model_name: "dinov3_vit7b16"
    
    # 方案 1: 使用原始 checkpoint (包含额外权重)
    checkpoint_path: "/media/pc/D/zhaochen/mono3d/dinov3/checkpoints/dinov3_vit7b16_lvd1689m.pth"
    
    # 方案 2: 使用提取后的纯净 backbone (推荐)
    # checkpoint_path: "/media/pc/D/zhaochen/mono3d/dinov3/checkpoints/dinov3_vit7b16_backbone_only.pth"
    
    # 方案 3: 使用官方 DINOv2 预训练权重
    # checkpoint_path: "/path/to/dinov2_vitl14_pretrain.pth"
    
    freeze: true  # 冻结 backbone,只训练 adapter
    
    # 架构参数 (ViT-7B/16)
    patch_size: 16
    embed_dim: 3200  # 7B 模型的嵌入维度
    num_heads: 25    # 7B 模型的注意力头数
    num_layers: 40   # 7B 模型的层数
    
    # 输出特征层 (用于多尺度特征)
    output_layers: [9, 19, 29, 39]  # 输出第 10, 20, 30, 40 层
  
  # ============================================
  # Detection Adapter 配置
  # ============================================
  detection_adapter:
    type: "detr_head"
    
    # ⭐ 核心修复: 使用随机初始化
    checkpoint_path: ""  # 留空表示随机初始化
    
    freeze: false  # 需要训练
    
    # 架构参数
    hidden_dim: 256
    num_queries: 300
    num_classes: 80  # COCO 数据集类别数
    
    # Transformer 配置
    nheads: 8
    num_encoder_layers: 6
    num_decoder_layers: 6
    dim_feedforward: 2048
    dropout: 0.1
    
    # 辅助损失
    aux_loss: true
    
    # Objectness 分支
    use_objectness: true
  
  # ============================================
  # Segmentation Adapter 配置
  # ============================================
  segmentation_adapter:
    type: "mask_head"
    
    # ⭐ 核心修复: 使用随机初始化
    checkpoint_path: ""  # 留空表示随机初始化
    
    freeze: false  # 需要训练
    
    # 架构参数
    hidden_dim: 256
    num_classes: 133  # ADE20K 数据集类别数
    
    # Mask 解码器配置
    num_mask_tokens: 100
    mask_dim: 256
    
    # FPN 配置
    use_fpn: true
    fpn_scales: [8, 16, 32]

# ============================================
# 推理配置
# ============================================
inference:
  device: "cuda"  # 或 "cpu"
  
  detection:
    score_threshold: 0.05  # 降低阈值以获得更多检测
    nms_threshold: 0.5
    max_detections: 100
  
  segmentation:
    score_threshold: 0.5
    min_mask_area: 100  # 最小 mask 面积(像素)
    
  # 批处理
  batch_size: 1
  
  # 图像预处理
  image_size: [1024, 1024]  # [height, width]
  normalize:
    mean: [0.485, 0.456, 0.406]
    std: [0.229, 0.224, 0.225]

# ============================================
# 训练配置 (如果需要)
# ============================================
training:
  # 基础配置
  batch_size: 4
  num_epochs: 50
  gradient_accumulation_steps: 1
  
  # 优化器
  optimizer:
    type: "adamw"
    lr: 1.0e-4
    weight_decay: 1.0e-4
    betas: [0.9, 0.999]
  
  # 学习率调度
  scheduler:
    type: "cosine"
    warmup_epochs: 5
    min_lr: 1.0e-6
  
  # 损失权重
  loss_weights:
    detection_class: 2.0
    detection_bbox: 5.0
    detection_giou: 2.0
    segmentation_mask: 5.0
    segmentation_dice: 1.0
  
  # 数据增强
  augmentation:
    random_flip: true
    random_crop: true
    color_jitter: true
    
  # 检查点
  checkpoint:
    save_dir: "./checkpoints"
    save_interval: 5  # 每 5 个 epoch 保存一次
    keep_last_n: 3  # 保留最后 3 个检查点

# ============================================
# 数据配置
# ============================================
data:
  detection:
    dataset: "coco"
    train_anno: "/path/to/coco/annotations/instances_train2017.json"
    val_anno: "/path/to/coco/annotations/instances_val2017.json"
    image_dir: "/path/to/coco/images"
  
  segmentation:
    dataset: "ade20k"
    train_anno: "/path/to/ade20k/annotations/training"
    val_anno: "/path/to/ade20k/annotations/validation"
    image_dir: "/path/to/ade20k/images"

# ============================================
# 日志配置
# ============================================
logging:
  log_dir: "./logs"
  tensorboard: true
  wandb: false
  print_interval: 10  # 每 10 个 iteration 打印一次